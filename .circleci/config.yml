# This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
version: 2.1
orbs:
  unity-ci: mizotake/unity-ci@0.1.3
description: 'Unity CI Orb'

commands:
  unity_activate:
    description: 'Unity License Activate'
    parameters:
      licenseFromEnv:
        description: 'Get from env'
        type: env_var_name
        default: UNITY_LICENSE_BASE64
      licenseFromPath:
        description: 'Get from path'
        type: string
        default: '/activateTools/Unity.ulf'
    steps:
      - run:
          name: activate
          command: |
            if [ -e "<< parameters.licenseFromPath >>" ]; then
              cat << parameters.licenseFromPath >> | tr -d '\r' > Unity.ulf
            else
              apt update && apt install cl-base64 -y
              echo ${<< parameters.licenseFromEnv >>} | base64 -di | tr -d '\r' > Unity.ulf
            fi
            /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile Unity.ulf || exit 0
  build:
    description: 'Unity Build'
    parameters:
      platform:
        description: 'Build Target Platform'
        type: string
      method:
        description: 'Build Execute Method'
        type: string
      no_output_timeout:
        description: 'No Output Timeout'
        type: string
        default: 10m
    steps:
      - run:
          name: build run
          command: |
            /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod << parameters.method >> -buildTarget << parameters.platform >>
          working_directory: ~/project/
          no_output_timeout: << parameters.no_output_timeout >>
  test:
    description: 'Unity Test'
    parameters:
      mode:
        description: 'Test Target Platform'
        type: string
    steps:
      - run:
          name: test run
          command: |
            mkdir ./test-results
            touch ./test-results/results.xml
            xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' /opt/Unity/Editor/Unity -batchmode -nographics -silent-crashes -logFile -projectPath . -runTests -testPlatform << parameters.mode >> -testResults ./test-results/results.xml
          working_directory: ~/project/
  execute_method:
    description: 'Build Execute Method'
    parameters:
      method:
        description: 'Target Method'
        type: string
    steps:
      - run:
          name: execute method
          command: |
            /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod << parameters.method >> -buildTarget standalone
          working_directory: ~/project/
  zip:
    description: 'Build Content Archive'
    parameters:
      directory:
        description: 'Target Directory'
        type: string
    steps:
      - run:
          name: zip archive
          command: |
            apt update && apt-get install -y zip
            zip archive -r << parameters.directory >>
            mv ./archive.zip << parameters.directory >>
          working_directory: .

jobs:
  build:
    parameters:
      exec:
        type: executor
      licenseFromEnv:
        description: 'Unity License'
        type: env_var_name
        default: UNITY_LICENSE_BASE64
      licenseFromPath:
        description: 'Get from path'
        type: string
        default: '/activateTools/Unity.ulf'
      method:
        description: 'Build Execute Method'
        type: string
      platform:
        description: 'Test Target Platform'
        type: string
      zip:
        description: 'Archive Build Contents'
        default: false
        type: boolean
      no_output_timeout:
        description: 'No Output Timeout'
        type: string
        default: 10m
      directory:
        description: 'Target Directory'
        type: string
        default: .
    executor: << parameters.exec >>
    steps:
      - attach_workspace:
          at: /activateTools
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - unity_activate:
          licenseFromEnv: << parameters.licenseFromEnv >>
          licenseFromPath: << parameters.licenseFromPath >>
      - build:
          platform: << parameters.platform >>
          method: << parameters.method >>
          no_output_timeout: << parameters.no_output_timeout >>
      - when:
          condition: << parameters.zip >>
          steps:
            - zip:
                directory: << parameters.directory >>
      - store_artifacts:
          path: << parameters.directory >>
  test:
    parameters:
      exec:
        type: executor
      licenseFromEnv:
        description: 'Unity License'
        type: env_var_name
        default: UNITY_LICENSE_BASE64
      licenseFromPath:
        description: 'Get from path'
        type: string
        default: '/activateTools/Unity.ulf'
      mode:
        description: 'Test Target Mode'
        type: string
    executor: << parameters.exec >>
    steps:
      - attach_workspace:
          at: /activateTools
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - unity_activate:
          licenseFromEnv: << parameters.licenseFromEnv >>
          licenseFromPath: << parameters.licenseFromPath >>
      - test:
          mode: << parameters.mode >>
  execute_method:
    parameters:
      exec:
        type: executor
      licenseFromEnv:
        description: 'Unity License'
        type: env_var_name
        default: UNITY_LICENSE_BASE64
      licenseFromPath:
        description: 'Get from path'
        type: string
        default: '/activateTools/Unity.ulf'
      method:
        description: 'Build Execute Method'
        type: string
    executor: << parameters.exec >>
    steps:
      - attach_workspace:
          at: /activateTools
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - unity_activate:
          licenseFromEnv: << parameters.licenseFromEnv >>
          licenseFromPath: << parameters.licenseFromPath >>
      - execute_method:
          method: << parameters.method >>
  outputAlf:
    parameters:
      exec:
        type: executor
    executor: << parameters.exec >>
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          key: unity-license
      - run:
          name: ifneed create alf
          command: |
            trap 'find . -name '*.alf' -exec mv '{}' "/activateTools/Unity.alf"  \;' 0
            [ -e "/activateTools/Unity.ulf" ] && EXISTS_ULF=true || EXISTS_ULF=false
            mkdir -p /activateTools
            echo ${EXISTS_ULF} > /activateTools/exists.txt
            if [ -n "/activateTools/Unity.ulf" ]; then
              (/opt/Unity/Editor/Unity -quit -batchmode -nographics -logFile -createManualActivationFile || exit 0)
            fi
      - persist_to_workspace:
          root: /activateTools
          paths:
            - .
  cloneActivateTool:
    docker:
      - image: alpine/git
    steps:
      - attach_workspace:
          at: /activateTools
      - run:
          name: ifneed clone activate tool
          command: |
            if ! $(cat /activateTools/exists.txt); then
              cd /activateTools
              git clone https://github.com/MizoTake/unity-license-activate.git
            fi
      - persist_to_workspace:
          root: /activateTools
          paths:
            - .
  outputUlf:
    docker:
      - image: buildkite/puppeteer
    steps:
      - attach_workspace:
          at: /activateTools
      - restore_cache:
          key: dependency-cache-{{ checksum "/activateTools/unity-license-activate/package-lock.json" }}
      - run:
          name: ifneed npm install
          command: |
            if ! $(cat /activateTools/exists.txt); then
              cd /activateTools/unity-license-activate
              npm install
            fi
      - save_cache:
          key: dependency-cache-{{ checksum "/activateTools/unity-license-activate/package-lock.json" }}
          paths:
            - /activateTools/unity-license-activate/node_modules
      - run:
          name: ifneed alf to ulf
          command: |
            if ! $(cat /activateTools/exists.txt); then
              cd /activateTools/unity-license-activate
              node activate.js $EMAIL $PASSWORD /activateTools/Unity.alf
              find . -name '*.ulf' -exec mv '{}' "/activateTools/Unity.ulf"  \;
            fi
      - persist_to_workspace:
          root: /activateTools
          paths:
            - .